name: CI/CD - FastAPI Clients API

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pylint

      - name: Run Pylint
        run: |
          pylint --rcfile=.pylintrc app
          pylint --rcfile=.pylintrc tests

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
          MONGO_INITDB_DATABASE: clients_db
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest

  docker:
    name: Build Docker Image
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t clients-api:${GITHUB_SHA} .

      - name: Check Prometheus metrics endpoint
        run: |
          docker run -d -p 8000:8000 --name test-api clients-api:${GITHUB_SHA}
          sleep 5
          curl --fail http://localhost:8000/metrics || (echo "/metrics endpoint missing"; exit 1)
          docker stop test-api
          docker rm test-api

  push-latest:
    name: Push Docker Image (latest)
    needs: docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push latest tag
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/clients-api:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/clients-api:latest
